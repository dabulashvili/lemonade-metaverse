name: Deploy to Staging
on:
  push:
    branches:
      - develop
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.STAGING_AWS_REGION }}
  DOCKER_BUILDKIT: 1
  SOURCE_REF: ${{ github.ref }}
  SOURCE_VERSION: ${{ github.sha }}
  SSM_PARAMETER_NAME: ${{ secrets.STAGING_SSM_PARAMETER_NAME }}

jobs:
  buildAndPush:
    name: Build and push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.STAGING_AWS_REGION }}
          aws-access-key-id: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}

      - name: Configure environment
        run: |
          aws ssm get-parameter --name $SSM_PARAMETER_NAME | jq '.Parameter.Value' | jq '. | fromjson' | jq -r 'to_entries | .[] | .key + "=" + .value' >> $GITHUB_ENV || exit 1

      - name: Amazon ECR login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push
        run: |
          docker build                                                     \
            --build-arg AWS_REGION=$AWS_REGION                             \
            --build-arg BUILDKIT_INLINE_CACHE=1                            \
            --build-arg SOURCE_VERSION=$SOURCE_VERSION                     \
            --cache-from $REPOSITORY_URI:release-builder                   \
            --cache-from $REPOSITORY_URI:release-base                      \
            --tag $REPOSITORY_URI:$SOURCE_VERSION                          \
            --tag $REPOSITORY_URI:release                                  \
            --target app                                                   \
            .

          docker build                                                     \
            --build-arg AWS_REGION=$AWS_REGION                             \
            --build-arg BUILDKIT_INLINE_CACHE=1                            \
            --tag $REPOSITORY_URI:release-builder                          \
            --target builder                                               \
            .

          docker build                                                     \
            --build-arg AWS_REGION=$AWS_REGION                             \
            --build-arg BUILDKIT_INLINE_CACHE=1                            \
            --tag $REPOSITORY_URI:release-base                             \
            --target base                                                  \
            .

      - name: Push version
        run: |
          docker push $REPOSITORY_URI:$SOURCE_VERSION

      - name: Push release
        if: github.event_name == 'push'
        run: |
          docker push $REPOSITORY_URI:release
          docker push $REPOSITORY_URI:release-builder
          docker push $REPOSITORY_URI:release-base

  deploy:
    needs: buildAndPush
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.STAGING_AWS_REGION }}
          aws-access-key-id: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}

      - name: Configure environment
        run: |
          aws ssm get-parameter --name $SSM_PARAMETER_NAME | jq '.Parameter.Value' | jq '. | fromjson' | jq -r 'to_entries | .[] | .key + "=" + .value' >> $GITHUB_ENV || exit 1

      - name: Configure kube
        run: |
          eval $KUBECONFIG_COMMAND

      - name: Deploy
        run: |
          kubectl set image --namespace $NAMESPACE deployment/metaverse-app app=$REPOSITORY_URI:$SOURCE_VERSION &
          kubectl set image --namespace $NAMESPACE deployment/metaverse-ingress ingress=$REPOSITORY_URI:$SOURCE_VERSION &
          kubectl set image --namespace $NAMESPACE deployment/metaverse-enrich enrich=$REPOSITORY_URI:$SOURCE_VERSION &
          wait

      - name: Verify
        run: |
          kubectl rollout status --namespace $NAMESPACE deployment/metaverse-app &
          kubectl rollout status --namespace $NAMESPACE deployment/metaverse-ingress &
          kubectl rollout status --namespace $NAMESPACE deployment/metaverse-enrich &
          wait
